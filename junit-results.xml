<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite errors="0" failures="1" hostname="Alexs-MacBook-Pro.local" name="pytest" skipped="0" tests="1" time="4.263" timestamp="2020-08-17T19:22:43.317510"><testcase classname="pd_parser.tests.test_parse_pd" file="pd_parser/tests/test_parse_pd.py" line="50" name="test_parse_pd" time="0.895"><failure message="KeyError: &quot;kind must be one of [&apos;eeg&apos;, &apos;mag&apos;, &apos;grad&apos;, &apos;ref_meg&apos;, &apos;misc&apos;, &apos;stim&apos;, &apos;eog&apos;, &apos;ecg&apos;, &apos;emg&apos;, &apos;seeg&apos;, &apos;bio&apos;, &apos;ecog&apos;, &apos;fnirs_raw&apos;, &apos;fnirs_od&apos;, &apos;hbo&apos;, &apos;hbr&apos;, &apos;csd&apos;], not ieeg&quot;">_bids_validate = &lt;function _bids_validate.&lt;locals&gt;._validate at 0x7f98cbd447a0&gt;

    @pytest.mark.filterwarnings(&apos;ignore::RuntimeWarning&apos;)
    @pytest.mark.filterwarnings(&apos;ignore::DeprecationWarning&apos;)
    def test_parse_pd(_bids_validate):
        # load in data
        out_dir = _TempDir()
        fname = op.join(out_dir, &apos;pd_data-raw.fif&apos;)
        behf = op.join(basepath, &apos;pd_beh.tsv&apos;)
        events = _read_tsv(op.join(basepath, &apos;pd_events.tsv&apos;))
        events_relative = _read_tsv(op.join(basepath, &apos;pd_events_relative.tsv&apos;))
    
        raw_tmp = mne.io.read_raw_fif(op.join(basepath, &apos;pd_data-raw.fif&apos;),
                                      preload=True)
        info = mne.create_info([&apos;ch1&apos;, &apos;ch2&apos;, &apos;ch3&apos;], raw_tmp.info[&apos;sfreq&apos;],
&gt;                              [&apos;ieeg&apos;] * 3)

_bids_validate = &lt;function _bids_validate.&lt;locals&gt;._validate at 0x7f98cbd447a0&gt;
behf       = &apos;/Users/alexrockhill/projects/pd-parser/pd_parser/tests/data/pd_beh.tsv&apos;
events     = {&apos;pd_sample&apos;: [202969, 226292, 233755, 241635, 249598, 257361, ...], &apos;trial&apos;: [0, 3, 4, 5, 6, 7, ...]}
events_relative = {&apos;duration&apos;: [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, ...], &apos;onset&apos;: [203.08839352941175, 203.68874647058823, 204.4231782352941,...226292, 226692, ...], &apos;trial_type&apos;: [&apos;Fixation&apos;, &apos;ISI Onset&apos;, &apos;Go Cue&apos;, &apos;Response&apos;, &apos;Fixation&apos;, &apos;ISI Onset&apos;, ...], ...}
fname      = &apos;/var/folders/s4/y1vlkn8d70jfw7s8s03m9p540000gn/T/tmp_mne_tempdir_hh1bn6nn/pd_data-raw.fif&apos;
out_dir    = &apos;/var/folders/s4/y1vlkn8d70jfw7s8s03m9p540000gn/T/tmp_mne_tempdir_hh1bn6nn&apos;
raw_tmp    = &lt;Raw | pd_data-raw.fif, 1 x 2818158 (2819.8 s), ~21.5 MB, data loaded&gt;

pd_parser/tests/test_parse_pd.py:64: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
&lt;decorator-gen-27&gt;:21: in create_info
    ???
        ch_names   = [&apos;ch1&apos;, &apos;ch2&apos;, &apos;ch3&apos;]
        ch_types   = [&apos;ieeg&apos;, &apos;ieeg&apos;, &apos;ieeg&apos;]
        montage    = None
        sfreq      = 999.412109375
        verbose    = None
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

ch_names = [&apos;ch1&apos;, &apos;ch2&apos;, &apos;ch3&apos;], sfreq = 999.412109375
ch_types = array([&apos;ieeg&apos;, &apos;ieeg&apos;, &apos;ieeg&apos;], dtype=&apos;&lt;U4&apos;), montage = None, verbose = None

    @verbose
    def create_info(ch_names, sfreq, ch_types=&apos;misc&apos;, montage=None, verbose=None):
        &quot;&quot;&quot;Create a basic Info instance suitable for use with create_raw.
    
        Parameters
        ----------
        ch_names : list of str | int
            Channel names. If an int, a list of channel names will be created
            from ``range(ch_names)``.
        sfreq : float
            Sample rate of the data.
        ch_types : list of str | str
            Channel types, default is ``&apos;misc&apos;`` which is not a
            :term:`data channel &lt;data channels&gt;`.
            Currently supported fields are &apos;ecg&apos;, &apos;bio&apos;, &apos;stim&apos;, &apos;eog&apos;, &apos;misc&apos;,
            &apos;seeg&apos;, &apos;ecog&apos;, &apos;mag&apos;, &apos;eeg&apos;, &apos;ref_meg&apos;, &apos;grad&apos;, &apos;emg&apos;, &apos;hbr&apos; or &apos;hbo&apos;.
            If str, then all channels are assumed to be of the same type.
        montage : None
            Deprecated. Use :meth:`mne.Info.set_montage` instead.
        %(verbose)s
    
        Returns
        -------
        info : instance of Info
            The measurement info.
    
        Notes
        -----
        The info dictionary will be sparsely populated to enable functionality
        within the rest of the package. Advanced functionality such as source
        localization can only be obtained through substantial, proper
        modifications of the info structure (not recommended).
    
        Note that the MEG device-to-head transform ``info[&apos;dev_head_t&apos;]`` will
        be initialized to the identity transform.
    
        Proper units of measure:
        * V: eeg, eog, seeg, emg, ecg, bio, ecog
        * T: mag
        * T/m: grad
        * M: hbo, hbr
        * Am: dipole
        * AU: misc
        &quot;&quot;&quot;
        from ..channels.montage import (DigMontage, _set_montage)
        try:
            ch_names = operator.index(ch_names)  # int-like
        except TypeError:
            pass
        else:
            ch_names = list(np.arange(ch_names).astype(str))
        _validate_type(ch_names, (list, tuple), &quot;ch_names&quot;,
                       (&quot;list, tuple, or int&quot;))
        _validate_type(montage, (None, str, DigMontage), &apos;montage&apos;)
        if montage is not None:
            warn(&apos;Passing montage to create_info is deprecated and will be &apos;
                 &apos;removed in 0.21, use raw.set_montage (or epochs.set_montage, &apos;
                 &apos;etc.) instead&apos;, DeprecationWarning)
        sfreq = float(sfreq)
        if sfreq &lt;= 0:
            raise ValueError(&apos;sfreq must be positive&apos;)
        nchan = len(ch_names)
        if ch_types is None:
            warn(&apos;Passing ch_types=None is deprecated and will not be supported &apos;
                 &apos;in 0.21, pass ch_types=&quot;misc&quot; instead.&apos;, DeprecationWarning)
            ch_types = &apos;misc&apos;  # just for backward compat
        if isinstance(ch_types, str):
            ch_types = [ch_types] * nchan
        ch_types = np.atleast_1d(np.array(ch_types, np.str))
        if ch_types.ndim != 1 or len(ch_types) != nchan:
            raise ValueError(&apos;ch_types and ch_names must be the same length &apos;
                             &apos;(%s != %s) for ch_types=%s&apos;
                             % (len(ch_types), nchan, ch_types))
        info = _empty_info(sfreq)
        for ci, (name, kind) in enumerate(zip(ch_names, ch_types)):
            _validate_type(name, &apos;str&apos;, &quot;each entry in ch_names&quot;)
            _validate_type(kind, &apos;str&apos;, &quot;each entry in ch_types&quot;)
            if kind not in _kind_dict:
                raise KeyError(&apos;kind must be one of %s, not %s&apos;
&gt;                              % (list(_kind_dict.keys()), kind))
E               KeyError: &quot;kind must be one of [&apos;eeg&apos;, &apos;mag&apos;, &apos;grad&apos;, &apos;ref_meg&apos;, &apos;misc&apos;, &apos;stim&apos;, &apos;eog&apos;, &apos;ecg&apos;, &apos;emg&apos;, &apos;seeg&apos;, &apos;bio&apos;, &apos;ecog&apos;, &apos;fnirs_raw&apos;, &apos;fnirs_od&apos;, &apos;hbo&apos;, &apos;hbr&apos;, &apos;csd&apos;], not ieeg&quot;

DigMontage = &lt;class &apos;mne.channels.montage.DigMontage&apos;&gt;
_set_montage = &lt;function _set_montage at 0x7f98cb7f44d0&gt;
ch_names   = [&apos;ch1&apos;, &apos;ch2&apos;, &apos;ch3&apos;]
ch_types   = array([&apos;ieeg&apos;, &apos;ieeg&apos;, &apos;ieeg&apos;], dtype=&apos;&lt;U4&apos;)
ci         = 0
info       = &lt;Info | 5 non-empty values
 bads: []
 ch_names: []
 custom_ref_applied: False
 highpass: 0.0 Hz
 lowpass: 499.7 Hz
 meas_date: unspecified
 nchan: 0
 projs: []
 sfreq: 999.4 Hz
&gt;
kind       = &apos;ieeg&apos;
montage    = None
name       = &apos;ch1&apos;
nchan      = 3
sfreq      = 999.412109375
verbose    = None

../../software/anaconda3/envs/swannlab/lib/python3.7/site-packages/mne/io/meas_info.py:2019: KeyError</failure></testcase></testsuite></testsuites>